# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master, ci ]
  pull_request:
    branches: [ master, ci ]

jobs:
  build:
    name: Build Jar File
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Download config file via SSH
        uses: nicklasfrahm/scp-action@main
        with:
          direction: download
          host: ${{ secrets.TEST_HOST }}
          username: ${{ secrets.TEST_HOST_USERNAME }}
          key: ${{ secrets.TEST_HOST_KEY }}
          fingerprint: ${{ secrets.TEST_HOST_FINGERPRINT }}
          source: /root/docker/code/WeCuit/resources
          target: src/main/resources
      - run: ls -l src/main/resources
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn -B -DskipTests package --file pom.xml
      - name: Build Image
        run: docker build -t ${{ secrets.DOCKER_REPOSITORY }}:latest .
      - name: Login to registry
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
      - name: Push Image
        run: docker push ${{ secrets.DOCKER_REPOSITORY }}:latest

  pull-docker:
    needs: [ build ]
    name: Pull Docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TEST_HOST }} # 服务器ip
          port: ${{ secrets.HOST_PORT }} # 服务器ssh端口
          username: ${{ secrets.TEST_HOST_USERNAME }} # 服务器登录用户名
          key: ${{ secrets.TEST_HOST_KEY }} # 服务器登录密码
          script: |
            # 停止旧版容器
            docker stop $(docker ps --filter ancestor=${{ secrets.DOCKER_REPOSITORY }} -q)
            # 删除旧版容器
            docker rm -f $(docker ps -a --filter ancestor=${{ secrets.DOCKER_REPOSITORY }}:latest -q)
            # 删除旧版镜像
            docker rmi -f $(docker images ${{ secrets.DOCKER_REPOSITORY }}:latest -q)
            # 登录阿里云镜像服务器
            docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
            # 拉取最新latest版本镜像
            docker pull ${{ secrets.DOCKER_REPOSITORY }}:latest
            # 运行最新latest版本镜像
            docker run -d -p 8888:8080 ${{ secrets.DOCKER_REPOSITORY }}:latest
